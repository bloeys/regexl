// Code generated by "stringer -type=TokenType"; DO NOT EDIT.

package regexl

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TokenType_Unknown-0]
	_ = x[TokenType_Space-1]
	_ = x[TokenType_String-2]
	_ = x[TokenType_Number-3]
	_ = x[TokenType_Operator-4]
	_ = x[TokenType_OpenBracket-5]
	_ = x[TokenType_CloseBracket-6]
	_ = x[TokenType_OpenCurlyBracket-7]
	_ = x[TokenType_CloseCurlyBracket-8]
	_ = x[TokenType_Colon-9]
	_ = x[TokenType_Comma-10]
	_ = x[TokenType_Bool-11]
	_ = x[TokenType_Plus-12]
	_ = x[TokenType_Object_Param_Key-13]
	_ = x[TokenType_FunctionName-14]
}

const _TokenType_name = "TokenType_UnknownTokenType_SpaceTokenType_StringTokenType_NumberTokenType_OperatorTokenType_OpenBracketTokenType_CloseBracketTokenType_OpenCurlyBracketTokenType_CloseCurlyBracketTokenType_ColonTokenType_CommaTokenType_BoolTokenType_PlusTokenType_Object_Param_KeyTokenType_FunctionName"

var _TokenType_index = [...]uint16{0, 17, 32, 48, 64, 82, 103, 125, 151, 178, 193, 208, 222, 236, 262, 284}

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
